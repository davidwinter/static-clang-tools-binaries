name: clang-tools-static-amd64

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    permissions:
      contents: read

    strategy:
      matrix:
        clang-version: [ 18.1.3 ]
        os_arch: [ linux, macos, macos-aarch64, windows ]

        include:
          # - clang-version: 14
          #   release: llvm-project-14.0.0.src
          # - clang-version: 15
          #   release: llvm-project-15.0.2.src
          # - clang-version: 16
          #   release: llvm-project-16.0.3.src
          # - clang-version: 17
          #   release: llvm-project-17.0.4.src
          - clang-version: 18.1.3
            release: llvm-project-18.1.3.src

          - arch: x86_64
            dotexe: ''
            bindir: '/build/bin'

          - os_arch: macos
            os: macos
            runner: macos-12
            arch: x86_64

          - os_arch: macos-aarch64
            os: macos
            runner: macos-14
            arch: aarch64

          - os: macos
            os-cmake-args: '-DCMAKE_CXX_FLAGS="-static-libgcc -static-libstdc++ -flto" -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 ${POSIX_CMAKE_ARGS} -DCMAKE_CXX_COMPILER=g++-11 -DCMAKE_C_COMPILER=gcc-11'
            build-args: '-j$(sysctl -n hw.ncpu)'
            shacmd: 'shasum -a512'

          - os_arch: linux
            os: linux
            runner: ubuntu-22.04
            os-cmake-args: '-DLLVM_BUILD_STATIC=ON -DCMAKE_CXX_FLAGS="-s -flto" ${POSIX_CMAKE_ARGS} -DCMAKE_CXX_COMPILER=g++-10 -DCMAKE_C_COMPILER=gcc-10'
            build-args: '-j$(nproc)'
            shacmd: 'sha512sum'

          - os_arch: windows
            os: windows
            runner: windows-2022
            os-cmake-args: '-Thost=x64 -DCMAKE_CXX_FLAGS="/MP /std:c++14" -DLLVM_USE_CRT_MINSIZEREL="MT"'
            build-args: '--config MinSizeRel'
            bindir: '/build/MinSizeRel/bin'
            dotexe: '.exe'
            shacmd: 'sha512sum.exe'
            extra-tar-args: '--exclude=${RELEASE}/clang/test/Driver/Inputs/* --exclude=${RELEASE}/libcxx/test/std/input.output/filesystems/Inputs/static_test_env/* --exclude=${RELEASE}/libclc/amdgcn-mesa3d'

    runs-on: ${{ matrix.runner }}

    env:
      COMMON_CMAKE_ARGS: '-DBUILD_SHARED_LIBS=OFF -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra"'
      POSIX_CMAKE_ARGS: '-DCMAKE_BUILD_TYPE=MinSizeRel'
      RELEASE: '${{ matrix.release }}'
      suffix: '${{ matrix.clang-version }}_${{ matrix.os }}-${{ matrix.arch }}'

    steps:
      - uses: actions/checkout@v4

      - run: gh release list
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: check if release already exists
        continue-on-error: true
        id: check_release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          if gh release view "v${{ matrix.clang-version }}" &>/dev/null; then
            echo "Release exists"
            echo "::set-output name=proceed::false"
          else
            echo "Release does not exist"
            echo "::set-output name=proceed::true"
          fi

      - name: get llvm-project
        if: ${{ steps.check_release.outputs.proceed == 'true' }}
        shell: bash
        run: |
          version=${RELEASE##llvm-project-}; version=${version%.src}
          curl -LO https://github.com/llvm/llvm-project/releases/download/llvmorg-${version}/${{ matrix.release }}.tar.xz

      - name: unpack llvm-project
        if: ${{ steps.check_release.outputs.proceed == 'true' }}
        shell: bash
        run: |
          tar xf ${{ matrix.release }}.tar.xz ${{ matrix.extra-tar-args }}

      - name: patch cmake implicit link libraries on macOS
        if: ${{ steps.check_release.outputs.proceed == 'true' && matrix.os == 'macos' }}
        shell: bash
        run: |
          for file in $(find /opt/homebrew/Cellar -name CMakeParseImplicitLinkInfo.cmake); do
            sed -i'.backup' -e 's/gcc_eh.\*|/gcc_eh.*|gcc_ext.*|/g' "$file"
          done

      - name: cmake
        if: ${{ steps.check_release.outputs.proceed == 'true' }}
        shell: bash
        run: |
          cmake -S ${{ matrix.release }}/llvm \
            -B ${{ matrix.release }}/build \
            ${{ env.COMMON_CMAKE_ARGS }} \
            ${{ matrix.os-cmake-args }} \
            ${{ matrix.extra-cmake-args }}

      - name: build
        if: ${{ steps.check_release.outputs.proceed == 'true' }}
        shell: bash
        run: |
          cmake --build ${{ matrix.release }}/build \
            ${{ matrix.build-args }} \
            --target clang-format clang-query clang-tidy clang-apply-replacements

      - name: print dependencies
        if: ${{ steps.check_release.outputs.proceed == 'true' && matrix.os == 'macos' }}
        run: otool -L ${{ matrix.release }}/build/bin/clang-format

      - name: rename output binary
        if: ${{ steps.check_release.outputs.proceed == 'true' && github.ref == 'refs/heads/main' }}
        run: |
          cd ${{ matrix.release }}${{ matrix.bindir }}
          mv clang-format${{ matrix.dotexe }} clang-format-${{ env.suffix }}${{ matrix.dotexe }}
          mv clang-query${{ matrix.dotexe }} clang-query-${{ env.suffix }}${{ matrix.dotexe }}
          mv clang-tidy${{ matrix.dotexe }} clang-tidy-${{ env.suffix }}${{ matrix.dotexe }}
          mv clang-apply-replacements${{ matrix.dotexe }} clang-apply-replacements-${{ env.suffix }}${{ matrix.dotexe }}

      - name: create and print sha512sum
        if: ${{ steps.check_release.outputs.proceed == 'true' && github.ref == 'refs/heads/main' }}
        shell: bash
        run: |
          cd ${{ matrix.release }}${{ matrix.bindir }}
          ${{ matrix.shacmd }} clang-format-${{ env.suffix }} > clang-format-${{ env.suffix }}.sha512sum
          ${{ matrix.shacmd }} clang-query-${{ env.suffix }} > clang-query-${{ env.suffix }}.sha512sum
          ${{ matrix.shacmd }} clang-tidy-${{ env.suffix }} > clang-tidy-${{ env.suffix }}.sha512sum
          ${{ matrix.shacmd }} clang-apply-replacements-${{ env.suffix }} > clang-apply-replacements-${{ env.suffix }}.sha512sum
          echo "Checksums are: "
          cat clang-format-${{ env.suffix }}.sha512sum
          cat clang-query-${{ env.suffix }}.sha512sum
          cat clang-tidy-${{ env.suffix }}.sha512sum
          cat clang-apply-replacements-${{ env.suffix }}.sha512sum

      - name: upload artifacts
        if: ${{ steps.check_release.outputs.proceed == 'true' && github.ref == 'refs/heads/main' }}
        uses: actions/upload-artifact@v2
        with:
          name: "clang-tools-${{ matrix.clang-version }}"
          path: "${{ matrix.release }}${{ matrix.bindir }}/clang-*-${{ env.suffix }}*"
          retention-days: 1

  draft-release:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-20.04
    permissions:
      contents: write
    needs: build
    strategy:
      matrix:
        clang-version: [ 18.1.3 ]

    steps:
      - uses: actions/checkout@v4

      - run: gh release list
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: check if release already exists
        continue-on-error: true
        id: check_release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          if gh release view "v${{ matrix.clang-version }}" &>/dev/null; then
            echo "Release exists"
            echo "::set-output name=proceed::false"
          else
            echo "Release does not exist"
            echo "::set-output name=proceed::true"
          fi

      - name: download artifacts
        if: ${{ steps.check_release.outputs.proceed == 'true' }}
        uses: actions/download-artifact@v2
        with:
          name: "clang-tools-${{ matrix.clang-version }}"

      - name: list files
        if: ${{ steps.check_release.outputs.proceed == 'true' }}
        run: ls -laR .

      - name: draft release
        if: ${{ steps.check_release.outputs.proceed == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          gh release create v${{ matrix.clang-version }} clang-* --draft --title v${{ matrix.clang-version }}
